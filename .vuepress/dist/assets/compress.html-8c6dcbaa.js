import{_ as a,p as n,q as s,Y as t}from"./framework-e1bed10d.js";const e={},p=t(`<h1 id="在安卓中如何对照片进行压缩后再加载到内存中" tabindex="-1"><a class="header-anchor" href="#在安卓中如何对照片进行压缩后再加载到内存中" aria-hidden="true">#</a> 在安卓中如何对照片进行压缩后再加载到内存中</h1><p>为什么我们要对照片进行压缩处理后再加载到内存中，原因是某些照片即使经过裁剪后体积仍然很大，直接加载到内存中有可能会导致程序崩溃。</p><p>在Android中，我们可以使用以下步骤对照片进行<strong>适当的压缩</strong>后再加载到内存中：</p><p>1.获取照片的原始Bitmap对象：使用BitmapFactory类中的<code>decodeFile()</code>方法或者<code>decodeStream()</code>方法，从文件或流中获取照片的原始Bitmap对象。</p><p>下面是一个示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Bitmap</span> originalBitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.压缩照片尺寸：根据需要，可以通过缩小照片的尺寸来减少内存占用。可以使用Bitmap类的<code>createScaledBitmap()</code>方法来实现。<code>createScaledBitmap()</code>方法需要传入四个参数：</p><ul><li>Bitmap对象</li><li>目标宽度</li><li>目标高度</li><li>是否保持原始宽高比作为参数</li></ul><p>下面是一个示例，将照片的宽度和高度缩小为原来的一半：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> originalWidth <span class="token operator">=</span> originalBitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> originalHeight <span class="token operator">=</span> originalBitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> scaledWidth <span class="token operator">=</span> originalWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> scaledHeight <span class="token operator">=</span> originalHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token class-name">Bitmap</span> scaledBitmap <span class="token operator">=</span> <span class="token class-name">Bitmap</span><span class="token punctuation">.</span><span class="token function">createScaledBitmap</span><span class="token punctuation">(</span>originalBitmap<span class="token punctuation">,</span> scaledWidth<span class="token punctuation">,</span> scaledHeight<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.压缩照片质量：可以通过降低照片的质量来减少内存占用。可以使用Bitmap类的<code>compress()</code>方法来实现。</p><p><code>compress()</code>方法需要传入三个参数：</p><ul><li>format：表示要压缩的图像格式，可选的格式有：<code>JPEG</code>、<code>PNG</code>和<code>WEBP</code>。</li><li>quality：表示图像的压缩质量，取值范围为0-100。0表示压缩质量最低，100表示无损压缩。</li><li>stream：表示输出流，用于接收压缩后的图像数据。</li></ul><p>下面是一个示例，将照片的质量压缩到80%并将压缩后的数据保存在字节数组中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ByteArrayOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scaledBitmap<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span><span class="token class-name">Bitmap<span class="token punctuation">.</span>CompressFormat</span><span class="token punctuation">.</span><span class="token constant">JPEG</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compressedData <span class="token operator">=</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.加载压缩后的照片到内存中：使用BitmapFactory类的<code>decodeByteArray()</code>方法将压缩后的照片数据加载到内存中的Bitmap对象中。<code>decodeByteArray()</code>方法需要传入三个参数：</p><ul><li>data：表示包含图像数据的字节数组。</li><li>offset：表示要解码的数据在字节数组中的起始偏移量。</li><li>length：表示要解码的数据长度。</li></ul><p>该方法返回一个解码后的Bitmap对象，如果解码失败，则返回null。</p><p>下面是一个示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Bitmap</span> compressedBitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeByteArray</span><span class="token punctuation">(</span>compressedData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> compressedData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，你就可以使用compressedBitmap对象来显示或处理压缩后的照片。</p><p>需要注意的是，压缩照片会降低图像质量，所以需要根据具体需求进行权衡。你可以根据自己的应用场景和要求调整压缩的尺寸和质量参数。</p>`,22),o=[p];function c(i,l){return n(),s("div",null,o)}const d=a(e,[["render",c],["__file","compress.html.vue"]]);export{d as default};
