import{_ as n,p as s,q as a,Y as t}from"./framework-e1bed10d.js";const p={},e=t(`<h1 id="第二章习题" tabindex="-1"><a class="header-anchor" href="#第二章习题" aria-hidden="true">#</a> 第二章习题</h1><h2 id="_1-dart语言的核心是什么-它是面向什么编程的" tabindex="-1"><a class="header-anchor" href="#_1-dart语言的核心是什么-它是面向什么编程的" aria-hidden="true">#</a> 1.Dart语言的核心是什么？它是面向什么编程的？</h2><p>Dart语言的核心是一种称为&quot;可选类型&quot;的特性，即变量可以选择是否声明其类型。这使得Dart既能作为强类型语言，也能作为动态类型语言使用，使得Dart在编写大型应用程序时能够提供更好的类型安全性和可读性，同时也保留了灵活性和简洁性。</p><p>Dart是一种面向对象的语言，支持面向对象编程、泛型编程和函数式编程。它的类和对象系统是Dart语言的核心特性之一，具有类似于Java和C#等传统面向对象语言的特性，比如继承、多态和接口。此外，Dart还具有异步编程和生成器等特性，使得开发人员能够轻松地编写高效的并发代码。</p><h2 id="_2-dart语言使用什么关键字来声明变量-dart语言使用什么关键字来声明常量-dart语言中常量的两种声明方式有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-dart语言使用什么关键字来声明变量-dart语言使用什么关键字来声明常量-dart语言中常量的两种声明方式有什么区别" aria-hidden="true">#</a> 2.Dart语言使用什么关键字来声明变量？Dart语言使用什么关键字来声明常量？Dart语言中常量的两种声明方式有什么区别？</h2><p>Dart语言使用关键字&quot;var&quot;、&quot;final&quot;和&quot;const&quot;来声明变量和常量。</p><ul><li>&quot;var&quot;用于声明一个变量并初始化它。例如，<code>var x = 10;</code>将创建一个类型为int的变量x，并将其初始化为10。</li><li>&quot;final&quot;用于声明一个只能被赋值一次的变量。例如，<code>final y = &quot;hello&quot;;</code>将创建一个类型为String的常量y，并将其初始化为&quot;hello&quot;。一旦被赋值，y的值不能被修改。</li><li>&quot;const&quot;用于声明一个在编译时就已经确定的常量。例如，<code>const z = 3.14;</code>将创建一个类型为double的常量z，并将其初始化为3.14。与final不同，const常量在声明时必须被初始化为一个常量表达式，例如一个数值、一个字符串、一个布尔值或一个符号。</li></ul><p>在Dart语言中，常量的声明方式有两种：</p><ul><li>在声明时使用关键字&quot;const&quot;，例如<code>const a = 10;</code>，这种常量在<strong>编译时</strong>就会被计算出来，并且可以被直接嵌入到代码中，以提高性能。</li><li>在声明时使用关键字&quot;final&quot;，并且将其初始化为一个编译时常量表达式，例如<code>final b = const [1, 2, 3];</code>。这种常量在<strong>运行时</strong>被计算出来，但是它们的值在程序执行期间是不会改变的。这种常量通常用于需要在运行时动态生成的情况，例如在构建列表或映射时。</li></ul><p>示例</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> y<span class="token punctuation">;</span>
  y<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//y=10</span>
    
  <span class="token keyword">const</span> x<span class="token punctuation">;</span>
  x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">//报错，const常量在声明时必须被初始化为一个常量表达式</span>
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token keyword">const</span> x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> 
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//x=5</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-在dart语言中-list是数组还是列表" tabindex="-1"><a class="header-anchor" href="#_3-在dart语言中-list是数组还是列表" aria-hidden="true">#</a> 3.在Dart语言中，List是数组还是列表？</h2><p>在Dart语言中，List是列表，而不是数组。虽然Dart中的List与其他语言中的数组类似，但它们具有许多与数组不同的特性。</p><p>在Dart中，List是一个有序的、可重复的集合，可以通过下标来访问和修改元素，同时支持添加、删除、排序和过滤等操作。与数组不同的是，Dart中的List可以包含不同类型的元素，即它们是泛型类型，可以使用尖括号来指定元素类型。例如，<code>List&lt;int&gt; numbers = [1, 2, 3];</code>将创建一个整数类型的列表，其中包含三个元素1、2、3。</p><p>此外，Dart中的List还支持扩展和收缩操作，即可以动态地添加或删除元素，而不必担心数组的长度问题。与数组不同的是，Dart中的List内部实现使用的是链表或动态数组，而不是静态数组，这使得它们能够更好地适应动态的数据结构。</p><h2 id="_4-map和循环练习" tabindex="-1"><a class="header-anchor" href="#_4-map和循环练习" aria-hidden="true">#</a> 4.Map和循环练习</h2><p>给定一个年份，自己创建一个世界杯键值对Map(key:年份，value:举办地点),通过forEach循环判断该年份是否举办了世界杯。如果举办了，那么输出举办世界杯的地点；如果没有举办，那么输出”该年份没有举办世界杯“。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">Map</span> map<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;1998&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;法国世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2002&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;韩日世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2006&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;德国世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2010&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;南非世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2014&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;巴西世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2018&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;俄罗斯世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2022&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;卡塔尔世界杯&#39;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Please enter the year you want to query: &#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span><span class="token operator">?</span> input <span class="token operator">=</span> stdin<span class="token punctuation">.</span><span class="token function">readLineSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You entered: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">input</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  bool flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span>input<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">key</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">!=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;该年份没有世界杯&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用try-catch捕获一个异常-并在捕获异常结束后输出-捕获完成-。" tabindex="-1"><a class="header-anchor" href="#_5-使用try-catch捕获一个异常-并在捕获异常结束后输出-捕获完成-。" aria-hidden="true">#</a> 5.使用try-catch捕获一个异常，并在捕获异常结束后输出“捕获完成”。</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可能会引发异常的代码</span>
  int result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">~/</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 除数为0，会引发一个异常</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 捕获异常并输出错误信息</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;An error occurred: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token comment">// finally块中的代码在try块和catch块结束后都会执行</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Catch finished&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-创建一个可选变量的函数" tabindex="-1"><a class="header-anchor" href="#_6-创建一个可选变量的函数" aria-hidden="true">#</a> 6.创建一个可选变量的函数</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// ignore: omit_local_variable_types</span>
  <span class="token class-name">Map</span> map<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;1998&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;法国世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2002&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;韩日世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2006&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;德国世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2010&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;南非世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2014&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;巴西世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2018&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;俄罗斯世界杯&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;2022&#39;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;卡塔尔世界杯&#39;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">printWordCap</span><span class="token punctuation">(</span>map<span class="token punctuation">:</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printWordCap</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">String</span> myYear<span class="token operator">=</span><span class="token string-literal"><span class="token string">&#39;2014&#39;</span></span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token operator">?</span> map<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;map is not provided.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span><span class="token punctuation">{</span>
    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span>myYear<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">key</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">!=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;该年份没有世界杯&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-给定一个水果字符串-通过switch语句判断水果的类型并输出" tabindex="-1"><a class="header-anchor" href="#_7-给定一个水果字符串-通过switch语句判断水果的类型并输出" aria-hidden="true">#</a> 7.给定一个水果字符串，通过switch语句判断水果的类型并输出</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">String</span> fruits<span class="token operator">=</span><span class="token string-literal"><span class="token string">&#39;苹果&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;苹果&quot;</span></span><span class="token punctuation">:</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;苹果&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;菠萝&quot;</span></span><span class="token punctuation">:</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;菠萝&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;梨子&quot;</span></span><span class="token punctuation">:</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;梨子&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;没有这个水果&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-详细说明dart语言接口、继承与mixin的区别-并指出其优先级顺序。" tabindex="-1"><a class="header-anchor" href="#_8-详细说明dart语言接口、继承与mixin的区别-并指出其优先级顺序。" aria-hidden="true">#</a> 8.详细说明Dart语言接口、继承与mixin的区别，并指出其优先级顺序。</h2><p>Dart语言中，接口（interface）、继承（inheritance）和mixin是三种面向对象编程的机制，它们分别用于描述类型的行为、类型的层次结构和类型的复用。它们之间有以下区别：</p><ol><li>接口：接口是一种抽象类型，用于描述类或对象的行为特征。接口只声明了类或对象应该具有哪些方法、属性或其他行为，但并不提供具体的实现。类可以实现一个或多个接口，从而表明它们具有接口定义的行为特征。Dart中的接口使用<code>implements</code>关键字来实现，例如：</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Cat is eating fish.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>Animal</code>是一个抽象类，它声明了一个<code>eat()</code>方法。<code>Cat</code>类通过实现<code>Animal</code>接口来表明它具有<code>eat()</code>方法的行为特征。</p><ol><li>继承：继承是一种描述类或对象之间关系的机制，用于表示某个类或对象从另一个类或对象派生而来，继承了它们的属性和方法。子类可以重写父类的方法或添加新的属性和方法，以适应自己的需求。Dart中的继承使用<code>extends</code>关键字来实现，例如：</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Animal is eating.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Cat is eating fish.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>Cat</code>类继承了<code>Animal</code>类的<code>eat()</code>方法，并重写了它来适应猫的需求。</p><ol><li>mixin：mixin是一种描述代码复用的机制，用于将一段代码“混合”到一个或多个类中。mixin是一种不依赖于类层次结构的代码复用方式，它可以让多个类共享一些通用的代码，而不需要在它们之间建立父子关系。Dart中的mixin使用<code>with</code>关键字来实现，例如：</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">mixin</span> <span class="token class-name">Swimming</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Swimming...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token keyword">with</span> <span class="token class-name">Swimming</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fish is eating.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>Swimming</code>是一个mixin，它声明了一个<code>swim()</code>方法。<code>Fish</code>类通过使用<code>with</code>关键字将<code>Swimming</code> mixin“混合”到它的行为中，从而获得了<code>swim()</code>方法。</p><p>优先级顺序方面，假如同时使用接口继承mixin，并且他们的@Override方法都一样，优先级顺序为类自身重写的方法、mixin、extends、implements。</p><p>示例</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Lion</span><span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;我是狮子&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Tiger</span><span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;我是老虎&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Leopard</span><span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;我是豹子&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">AnimalOne</span> <span class="token keyword">extends</span> <span class="token class-name">Leopard</span> <span class="token keyword">with</span> <span class="token class-name">Lion</span><span class="token punctuation">,</span><span class="token class-name">Tiger</span><span class="token punctuation">{</span>
  <span class="token comment">//@override</span>
  <span class="token comment">//void printName() {</span>
    <span class="token comment">//print(&#39;我是动物1&#39;);</span>
  <span class="token comment">//}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">AnimalTwo</span> <span class="token keyword">extends</span> <span class="token class-name">Leopard</span> <span class="token keyword">with</span> <span class="token class-name">Lion</span> <span class="token keyword">implements</span> <span class="token class-name">Tiger</span><span class="token punctuation">{</span>
  <span class="token comment">//@override</span>
  <span class="token comment">//void printName() {</span>
    <span class="token comment">//print(&#39;我是动物2&#39;);</span>
  <span class="token comment">//}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">AnimalOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">AnimalTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//输出结果：</span>
<span class="token comment">//我是老虎</span>
<span class="token comment">//我是狮子</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-定义一个list-dynamic-泛型-并添加多种类型的数据-然后使用for循环-非for-in循环-输出所有数据" tabindex="-1"><a class="header-anchor" href="#_9-定义一个list-dynamic-泛型-并添加多种类型的数据-然后使用for循环-非for-in循环-输出所有数据" aria-hidden="true">#</a> 9.定义一个<code>List&lt;dynamic&gt;</code>泛型，并添加多种类型的数据，然后使用for循环（非for-in循环）输出所有数据</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&#39;苹果&#39;</span></span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;红楼梦&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;曹雪芹&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-详细说明为什么习题9中定义的list-dynamic-泛型可以添加多种类型的数据" tabindex="-1"><a class="header-anchor" href="#_10-详细说明为什么习题9中定义的list-dynamic-泛型可以添加多种类型的数据" aria-hidden="true">#</a> 10.详细说明为什么习题9中定义的<code>List&lt;dynamic&gt;</code>泛型可以添加多种类型的数据</h2><p>在Dart语言中，<code>List&lt;dynamic&gt;</code> 表示一个动态类型的列表，即列表中的元素可以是任意类型，包括基本类型（如<code>int</code>、<code>double</code>、<code>bool</code>等）、对象类型（如<code>String</code>、<code>Person</code>等）、函数类型等。</p><p>虽然 <code>List&lt;dynamic&gt;</code> 可以添加多种类型的数据，但这并不意味着它是类型不安全的。这是因为Dart语言的类型检查是在编译时进行的，而不是在运行时进行的。当我们将一个值添加到 <code>List&lt;dynamic&gt;</code> 中时，编译器会根据添加的值的类型进行类型推断，并在运行时将其视为相应的类型。</p><p>例如，以下代码将一个<code>int</code>类型的值和一个<code>String</code>类型的值添加到 <code>List&lt;dynamic&gt;</code> 中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;hello&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在编译时，编译器会推断出 <code>list</code> 是一个 <code>List&lt;dynamic&gt;</code> 类型的列表，因为我们没有指定列表中元素的类型，而 <code>123</code> 是一个 <code>int</code> 类型的值，而 <code>&#39;hello&#39;</code> 是一个 <code>String</code> 类型的值。因此，在运行时，<code>list</code> 中的第一个元素被视为 <code>int</code> 类型的值，而第二个元素被视为 <code>String</code> 类型的值。</p><p>然而，需要注意的是，如果我们尝试对 <code>list</code> 中的元素进行类型不匹配的操作，例如将 <code>list[0]</code> 视为 <code>String</code> 类型的值，或者将 <code>list[1]</code> 视为 <code>int</code> 类型的值，就会导致运行时错误。因此，虽然 <code>List&lt;dynamic&gt;</code> 允许添加多种类型的数据，但我们在使用时仍然需要小心处理，以避免类型不匹配的问题。</p><h2 id="_11-在一个dart文件中定义一个加法函数-通过库导入-在另一个dart文件中国-使用这个加法函数。" tabindex="-1"><a class="header-anchor" href="#_11-在一个dart文件中定义一个加法函数-通过库导入-在另一个dart文件中国-使用这个加法函数。" aria-hidden="true">#</a> 11.在一个dart文件中定义一个加法函数，通过库导入；在另一个dart文件中国，使用这个加法函数。</h2><p>myMethod.dart</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>xAddy(int x,int y){
  print(x+y);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test.dart</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import &#39;myMethod.dart&#39; show xAddy;
void main(){
  xAddy(5,8);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-对象练习" tabindex="-1"><a class="header-anchor" href="#_12-对象练习" aria-hidden="true">#</a> 12.对象练习</h2><p>假如现在有两个Person对象，它们的成员有name（名字）和age（年龄）。你需要在程序中直接通过“+”运算符算出这两个Person对象中的年龄和，并生成一个新的Person对象，然后通过toString()输出它们的年龄和。（提示：使用自定义类&quot;+&quot;操作符以及toString()方法）</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  int age<span class="token punctuation">;</span>
  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span> <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name <span class="token operator">+</span> p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> age <span class="token operator">+</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;name=&quot;</span></span><span class="token operator">+</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string-literal"><span class="token string">&quot;;age=&quot;</span></span><span class="token operator">+</span>age<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">Person</span> one<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;老大&quot;</span></span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span> two<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;老二&quot;</span></span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span> oneAddtwo<span class="token operator">=</span>one<span class="token operator">+</span>two<span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>oneAddtwo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//由于print()函数期望一个字符串作为参数，而我们传递给它的是一个Person对象three，因此Dart会自动调用three对象的toString()方法来获取其字符串表示形式。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","chapter2_exercise.html.vue"]]);export{r as default};
