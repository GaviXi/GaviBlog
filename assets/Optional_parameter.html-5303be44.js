import{_ as n,p as s,q as a,Y as t}from"./framework-e1bed10d.js";const p="/GaviBlog/assets/Optional_parameter-1-dd4d0096.png",e={},i=t(`<h1 id="the-parameter-xxx-can-t-have-a-value-of-null-because-of-its-type-xxx-but-the-implicit-default-value-is-null" tabindex="-1"><a class="header-anchor" href="#the-parameter-xxx-can-t-have-a-value-of-null-because-of-its-type-xxx-but-the-implicit-default-value-is-null" aria-hidden="true">#</a> The parameter &#39;xxx&#39; can&#39;t have a value of &#39;null&#39; because of its type &#39;xxx&#39;, but the implicit default value is &#39;null&#39;.</h1><h2 id="错误代码" tabindex="-1"><a class="header-anchor" href="#错误代码" aria-hidden="true">#</a> 错误代码</h2><p>在Dart中，定义带有可选参数的函数时，使用下面这种写法代码提示错误</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">printUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">,</span>int age<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printUser</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;li&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="报错信息" tabindex="-1"><a class="header-anchor" href="#报错信息" aria-hidden="true">#</a> 报错信息</h2><p>报错信息如下：</p><p><img src="`+p+`" alt=""></p><p>The parameter &#39;name&#39; can&#39;t have a value of &#39;null&#39; because of its type &#39;String&#39;, but the implicit default value is &#39;null&#39;. 由于参数name是String类型，值不能为null，但隐式的默认值是null。</p><p>The parameter &#39;age&#39; can&#39;t have a value of &#39;null&#39; because of its type &#39;int&#39;, but the implicit default value is &#39;null&#39;. 由于参数age是int类型，值不能为null，但隐式的默认值是null。</p><h2 id="报错原因" tabindex="-1"><a class="header-anchor" href="#报错原因" aria-hidden="true">#</a> 报错原因</h2><p>发生这种情况的原因是，Dart启用了空安全，不可空的参数因子或键就不能为空。</p><p>Dart在2.12版本之后开始支持空安全（Null Safety）：空安全是一种对可能为空的变量在编译期就进行校验的一种审查机制，有了空安全，原本处于运行时的空值引用错误将变为编辑时的分析错误。这种检查机制对所有变量的默认值也进行了改变，以前默认为null，而使用空安全后，代码中的类型将默认是非空的，意味着除非你声明它们可空，否则它们的值都不能为空并且会报错。</p><h2 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> <strong>解决方法</strong></h2><p>1.声明<strong>可空参数</strong></p><p>创建变量时，如果想要一个变量可为null，需要显式声明为可空的类型，具体就是使用“<strong>?</strong>”进行声明。比如String?、int?等，表示变量是一个可空类型，可以赋值为空。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">printUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token operator">?</span> name<span class="token punctuation">,</span>int<span class="token operator">?</span> age<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printUser</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&#39;Li&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出Li, null</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.给参数赋<strong>默认值</strong></p><p>给参数设置默认值。如果参数有默认值，在调用函数时如果不对参数传值，则使用默认值。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">printUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> int age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printUser</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Li&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Li, 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.使用<strong>required</strong>标记</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:meta/meta.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">printUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>required <span class="token class-name">String</span> name<span class="token punctuation">,</span> required int age<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// printUser(name: &#39;Gavi&#39;); // Error: Required named parameter &#39;age&#39; must be provided.</span>
  <span class="token function">printUser</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Gavi&#39;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gavi, 18</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[i];function c(l,u){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","Optional_parameter.html.vue"]]);export{k as default};
