import{_ as n,p as s,q as a,Y as t}from"./framework-e1bed10d.js";const e="/GaviBlog/assets/1-fd84cc85.png",p={},o=t(`<h1 id="async-await-promise的再认识" tabindex="-1"><a class="header-anchor" href="#async-await-promise的再认识" aria-hidden="true">#</a> async/await &amp; Promise的再认识</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>在开发微信小程序过程中，遇到如下需求：</p><p><strong>需要等待wx.requestPayment的回调函数执行完后再执行后续代码</strong></p><p>这是因为在调用wx.requestPayment之后，会弹出一个支付弹窗，如果此时点击右上角的<code>x</code>，那么将会执行wx.requestPayment的回调函数fail中的代码。而由于<code>wx.requestPayment</code>的回调函数是<strong>异步执行</strong>的，所以程序会继续跑下去执行后面的代码。这会出现什么问题呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">fabu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> wx<span class="token punctuation">.</span><span class="token function">requestPayment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>params<span class="token punctuation">,</span>
      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Payment success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//...(假设这里是支付成功后的代码)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Payment failed&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...(假设这里是支付成功后的代码)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.如果我把支付成功后的代码写到wx.requestPayment的后面，那么在我点击了右上角的<code>x</code>后，程序会执行后续的代码，导致我明明没有支付却执行了支付成功的代码。</p><p>2.如果我把支付成功后的代码写到wx.requestPayment的回调函数（succes）里，那么会出现：在弹出弹窗等待用户进行支付操作之后，程序会继续执行wx.requestPayment后面的代码的现象，这会导致用户未完成支付操作，fabu()这个函数就已经执行完并返回结果了。</p><h2 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> <strong>Solution</strong></h2><p>由于<code>wx.requestPayment</code>的回调函数是异步执行的，而且微信开发者工具不支持直接使用<code>async/await</code>等待回调函数的执行完成，所以无法直接通过在<code>wx.requestPayment</code>前加上<code>await</code>来等待回调函数执行完毕。</p><p>不过，可以使用<code>Promise</code>和<code>resolve</code>来手动实现等待回调函数执行完毕后再执行后续代码的效果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">doPayment</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> paymentResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        wx<span class="token punctuation">.</span><span class="token function">requestPayment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token operator">...</span>params<span class="token punctuation">,</span>
          <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Payment success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在成功回调函数中手动触发resolve，并传递回调数据</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果不是耗时处理，处理支付失败的情况可以写在这</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Payment failed in&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在失败回调函数中手动触发reject，并传递错误信息</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Continue with the next steps&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 在这里可以执行支付成功后的代码</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//如果是耗时处理，处理支付失败的情况可以写在这</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Payment failed out&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这里是try catch块后面的代码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们在doPayment函数中使用await new Promise来等待wx.requestPayment的完成，并获取支付结果。在成功情况下，输出&quot;Payment success&quot;，然后可以执行后续代码。在失败情况下，输出&quot;Payment failed&quot;并打印错误信息，可以在catch块中处理支付失败的情况。</p><p>这样我们就能做到等待wx.requestPayment的回调函数执行完后再执行后续代码，如图所示：</p><p><img src="`+e+'" alt="image-20230517001148702"></p>',15),c=[o];function i(u,l){return s(),a("div",null,c)}const k=n(p,[["render",i],["__file","async_await_Promise.html.vue"]]);export{k as default};
